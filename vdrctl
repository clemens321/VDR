#!/usr/bin/perl

# Copyright (c) 2015 Clemens Brauers <vdr@admin-cb.de>
# Contains code adopted from vdrctl by Christopher Reimer
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

use strict;
use warnings;

use Getopt::Long;
use Term::ANSIColor;
use Pod::PlainText;
# Debugging module - not needed in productive environment
use Data::Dumper;

# Define global variables
my $PROGNAME    = 'vdrctl';
my $VERSION     = '0.0.2';

my $DEFAULTPRIORITY = 50;

# Define configuration variables - assign default values
my $argsdir = `pkg-config --variable argsdir vdr 2>/dev/null`; chomp($argsdir); # remove trailing slash
$argsdir    = '/etc/vdr/conf.d/' unless $argsdir;
my $availdir= '../conf.avail';
my $force   = 0;

# Allow short options to be bundled when using just one dash
Getopt::Long::Configure("bundling");
# Needed for priority
Getopt::Long::Configure("require_order");
# Get options
GetOptions(
  'argsdir|a=s'   => \$argsdir,
  'availdir|A=s'  => \$availdir,
  'force'         => \$force,
  'help|h'        => \&help,
  'version|V'     => \&version
);

# Add trailing slash if not present
$availdir .= '/' unless $availdir =~ m/\/$/;
$argsdir  .= '/' unless $argsdir  =~ m/\/$/;

my $availabs = $argsdir . $availdir;
$availabs = $availdir if $availdir =~ m/^\//;

if (not -d $argsdir) {
  printf STDERR "Argsdir %s not found or no directory\n", $argsdir;
  exit 1;
}
if (not -d $availabs) {
  printf STDERR "Availdir %s not found or no directory\n", $availdir;
  exit 2;
}

my $command = shift @ARGV;
die("No command given\n") unless $command;

# read argsdir and availdir
my $files = &getFiles;
sub getFiles {
  my %files = ();
  my $checkfile = sub {
    my ($dir, $file, $type) = @_;

    # Only files
    return unless (-f $dir . $file);

    # Check filename with regex, extract components in one step
    my (undef, $priority, $name) = ($file =~ m/^((\d\d)\-?)?(.+)\.conf$/);
    return unless defined $name;

    # Hardcoded opt-out
    return if $name eq 'vdr';

    $files{$name} = { 'name' => $name } unless defined $files{$name};
    my $f = $files{$name};

    if (defined($f->{$type})) {
      printf STDERR "Found multiple %s files %s, ignoring %s\n", $type, $name, $file;
      return;
    }

    $f->{$type} = $file;
    $f->{(($type eq 'available') ? 'def' : '') . 'priority'} = $priority;
    if (($type ne 'available') and (-l $dir . $file)) {

      $f->{'link'} = readlink($dir . $file);
      if (defined($f->{'available'}) and ($f->{'link'} eq $availdir . $f->{'available'})) {
        $f->{'linkok'} = 1;
      }
    }
  };

  opendir DIRPTR, $availabs;
  while (my $file = readdir(DIRPTR)) {
    &$checkfile($availabs, $file, 'available');
  }
  closedir DIRPTR;

  opendir DIRPTR, $argsdir;
  while (my $file = readdir(DIRPTR)) {
    &$checkfile($argsdir, $file, 'enabled');
  }
  closedir DIRPTR;
  return \%files;
}

# no native switch-case in perl
if ($command eq 'list') {
  &list;
} elsif ($command eq 'status') {
  &status;
} elsif ($command eq 'enable') {
  &enable;
} elsif ($command eq 'disable') {
  &disable;
} elsif ($command eq 'edit') {
  &edit;
} elsif ($command eq 'dump-files') {
  print Dumper(&getFiles);
}

sub list {
  my ($enabled, $disabled) = ();
  GetOptions('enabled|e' => \$enabled, 'disabled|d' => \$disabled);
  if ($enabled or $disabled) {
    # trimmed output
    print colored['bold'], "Enabled files:\n"  if $enabled and $disabled;
    print sort map { $_->{'name'} . "\n" } grep {     defined $_->{'enabled'} } values %$files if $enabled;
    print colored['bold'], "Disabled files:\n" if $enabled and $disabled;
    print sort map { $_->{'name'} . "\n" } grep { not defined $_->{'enabled'} } values %$files if $disabled;
  } else {
    # fancy output
    foreach my $f (sort { $a->{'name'} cmp $b->{'name'} } values %$files) {
      printf "%-44s", $f->{'name'};
      if (defined($f->{'available'}) and defined($f->{'enabled'})) {
        print colored['bright_green bold'], "enabled";
        print " (" . $f->{'priority'} . ")" if defined($f->{'priority'}) and ($f->{'priority'} != $DEFAULTPRIORITY);
        print " *" if not defined $f->{'linkok'};
        print "\n";
      } elsif (defined($f->{'enabled'})) {
        print "foreign";
        print " (" . $f->{'priority'} . ")" if defined($f->{'priority'}) and ($f->{'priority'} != $DEFAULTPRIORITY);
        print "\n";
      } elsif (defined($f->{'available'})) {
        print colored['bright_red bold'], "disabled\n";
      } else {
        print colored['bright_red bold'], "curious\n";
      }
    }
  }
}

sub status {
  my $format = "%-20s %-20s\n";

  my ($yes, $no) = (sprintf(colored['bright_green bold'], 'yes'), sprintf(colored['bright_red bold'], 'no'));

  while (my $name = shift @ARGV) { 
    printf $format, "Name:", sprintf(colored['bold'], $name);
    if (not defined $files->{$name}) {
      print colored['bright_red bold'], "Configuration file not found\n\n";
      next;
    }
    my $f = $files->{$name};
    printf $format, "Available-File:",  $f->{'available'}   if defined $f->{'available'};
    printf $format, "Default-Prio:",    $f->{'defpriority'} if defined $f->{'defpriority'};
    printf $format, "Enabled-File:",    $f->{'enabled'}     if defined $f->{'enabled'};
    printf $format, "Priority:",        $f->{'priority'}    if defined $f->{'priority'};
    printf $format, "Symlink-Target:",  (defined($f->{'link'}) ? $f->{'link'} : $no) if defined $f->{'enabled'};
    printf $format, "Symlink ok?",      ($f->{'linkok'} ? $yes : $no) if defined $f->{'link'};
    print "\n";
  }
}

sub enable {
  while (my $name = shift(@ARGV)) {
    if (not defined $files->{$name}) {
      print colored['bright_red bold'], "Configuration file $name not found\n";
      next;
    }
    my $f = $files->{$name};
    if (not defined $f->{'available'}) {
      print colored['bright_red bold'], "Configuration file $name not available\n";
      next;
    }

    my $priority = $DEFAULTPRIORITY;
    my $myforce = $force;
    $priority = $f->{'defpriority'} if defined $f->{'defpriority'};

    GetOptions('priority|p=i' => \$priority, 'force|f' => \$myforce);

    if ($priority <= 0 or $priority > 99) {
      print colored['bright_red bold'], "Priority for $name is not in range 01 to 99\n";
      next;
    }
    $priority = sprintf("%02s", $priority);

    if (defined($f->{'enabled'})) {
      if ($myforce) {
        unlink($argsdir . $f->{'enabled'});
      } else {
        print "Configuration file $name already enabled\n";
        print "See \"$0 status $name\" for details\n";
        next;
      }
    }
    my $newfile = $priority . '-' . $name . '.conf';

    # file exists, but that's ok if 
    if (-e $argsdir . $newfile) {
      print colored['bright_red bold'], "File $newfile already exists\n";
      next;
    }
    symlink($availdir . $f->{'available'}, $argsdir . $newfile);
  }
}

sub disable {
  while (my $name = shift @ARGV) {
    if (not defined $files->{$name}) {
      print colored['bright_red bold'], "Configuration file $name not found\n";
      next;
    }
    my $f = $files->{$name};
    my $myforce = $force;
    GetOptions('force|f' => \$myforce);
    if (not defined($f->{'enabled'})) {
      print "Configuration file $name not enabled\n";
    } elsif ($myforce or defined($f->{'linkok'})) {
      unlink($argsdir . $f->{'enabled'});
    } else {
      print "Configuration file $name is no good symlink, needs --force\n";
      print "See \"$0 status $name\" for details\n";
    }
  }
}

sub edit {
  my $editor = $ENV{'EDITOR'};
  $editor = '/usr/bin/editor' if ((not $editor) and (-x '/usr/bin/editor'));
  $editor = '/usr/bin/nano'   if ((not $editor) and (-x '/usr/bin/nano'));
  $editor = '/usr/bin/vi'     if ((not $editor) and (-x '/usr/bin/vi'));
  $editor = '/bin/vi'         if ((not $editor) and (-x '/bin/vi'));
  GetOptions('editor|e=s' => \$editor);
  while (my $name = shift @ARGV)  {
    if (not defined $files->{$name}) {
      print colored['bright_red bold'], "Configuration file $name not found\n";
      next;
    }
    my $f = $files->{$name};
    if (defined($f->{'enabled'})) {
      system($editor, $argsdir . $f->{'enabled'});
    } elsif (defined($f->{'available'})) {
      system($editor, $availabs . $f->{'available'});
    } else {
      print colored['bright_red bold'], "No file found for $name\n";
      next;
    }
  }
}

sub help {
  Pod::PlainText->new(sentence => 0)->parse_from_file($0);
  exit 0;
}

sub version {
  print "$PROGNAME $VERSION\n";
  exit 0;
}

=head1 NAME

vdrctl - Control vdr configuration files

=head1 USAGE

vdrctl [global options] command [command options]

=head1 DESCRIPTION

B<vdrctl> adds/removes symlinks or list the available or enabled configuration files of vdr.

In the following ARGSDIR is the configured conf.d path or read by pkg-config.

=head2 Global Options

=over 5

=item B<--argsdir>=<directory>

read files from <directory> instead of ARGSDIR (defaults to /etc/vdr/conf.d)

=item B<--availdir>=<directory>

read files from <directory> instead of ARGSDIR/../conf.avail
can be absolute or relative to argsdir

=back

=head2 Commands

=over

=item B<list>

list all available and enabled configuration files

=over 5

=item B<--enabled>

print a sorted list of all enabled configuration files

=item B<--disabled>

print a sorted list of all available but not enabled configuration files

=back

=item B<status> <filename> [<filename> ...]

show status of the named file

=item B<enable> <filename> [--priority=<prio>] [<filename> ...]

create a symlink in ARGSDIR pointing to the file in AVAILDIR

=over 5

=item B<--priority>=<00-99>

optionally override priority

=back

=item B<disable> <filename> [<filename> ...]

remove a symlink in ARGSDIR

=item B<edit> <filename> [<filename> ...]

start an editor with named file in AVAILDIR

=over 5

=item B<--editor|e> <filename>

name a specific editor

=back

=back
